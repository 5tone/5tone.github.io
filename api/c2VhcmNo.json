[{"title":"阿里巴巴编码规范","date":"2021-06-25T20:22:34.893Z","date_formatted":{"ll":"Jun 25, 2021","L":"06/25/2021","MM-DD":"06-25"},"updated":"2021-06-25T12:22:34.893Z","content":"\n编程规约\n命名风格\n1234567891011121314151617181920212223242526272829303132331. 代码命名不能以下划线或者美元符号开头或者结尾2. 代码命名不能以中文拼音或者中文拼音与英文混合方式3. 类名使用UpperCamCamelCase风格，但DO、PO、DTO、VO、BO等除外4. 方法名、参数名、变量名统一使用lowerCamelCase，必须遵守驼峰命名5. 常量名全部大写，单词间用下划线隔开6. 抽象类必须以Abstract或者Base开头，异常类必须以Exception结尾，测试             类以测试的类的名称开头Test结尾7. 类型与中括号紧挨相连标示数组8. POJO类中布尔类型变量不要加is前缀9. 包名统一小写，点分隔符有且有一个自然语义单词10. 避免在父子类和不同代码块中采用相同变量名11. 避免不规范的缩写命名12. 在对元素命名时用完整单词组合表达其意13. 常量和变量命名时，表示类型放在词尾，如：idList、TERMINATED_TREAD_COUNT14. 接口、类、方法、模块使用设计模式，命名时要体现具体模式15. 接口类中的方法和属性不要加任何修饰符，并加上有效的javadoc。16. 接口和实现类的命名规则：    1、对于service和dao类，实现类必须用Impl结尾；    2、如果是形容能力的接口名称，取对应的形容词为接口名 AbstractTranslator实现 Translatable接口17. 枚举类名加Enum后缀，枚举成员名称全大写，单词间用下划线隔开18. 各层命名规范：    A) Service/DAO层命名规约       1.获取单个对象的方法用get做前缀       2.获取多个对象的方法用list做前缀，如：listObjects       3.获取统计值的方法用count做前缀       4.插入方法用save/insert做前缀       5.删除方法用delete/remove做前缀       6.修改方法用update做前缀    B）领域模型命名规范       1.数据对象：xxxDO, xxx为数据库表名       2.数据传输对象：xxxDTO,xxx为业务模型相关名称       3.展示对象：xxxVO，xxx一般为网页名称       4.POJO是对DO、DTO、VO、BO的统称，禁止xxxPOJO\n常量定义\n123456789101. 代码中禁止出现魔法值2. 在Long类型中赋值，数值后使用大写L3. 不要在一个常量类中维护所有常量，要根据功能分开维护4. 常量的复用层次：   1.跨应用：放在二方库中，通常在constant目录下   2.应用内：放在一方库中，通常在constant目录下   3.子工程内：放在当前子工程constant目录下   4.包内共享常量：当前包下单独的constant目录下   5.类内共享常量：直接在类内部private static final定义5. 如果变量值只在固定的范围内变化，用enum类型定义\n代码格式\n1234567891011121. 如果大括号代码为空直接&#x27;&#123;&#125;&#x27;,大括号内有代码则：左大括号左侧不换行，右侧换行；右大括号右侧换行，左侧如果不跟else等代码换行，否则不换行2. 小括号和字符之间不能有空格，括号内字符和运算符之间有空格 如：if (a == b)3. if、for、while、do、switch与括号之间必须有空格4. 任何二目、三目运算符前后必须有空格5. 采用4个空格，禁止使用tab6. 注释的双斜线和内容要有空格7. 强制类型转换时，右括号与强制转换值之间不用空格8. 单行字符不超过120个，超过要换行9. 方法在定义和传参时，必须要加空格10. IDE的text file encoding 设置为UTF-8；IDE中 文件的换行符使用Unix格式11. 单个方法尽量不超过80行12. 不同逻辑、不同语义、不同业务之间的代码插入一个空行分隔符\nOOP规约\n123456789101112131415161718192021222324252627282930313233343536371. 不用一个类型的对象引用来访问静态方法和静态属性，直接类名访问即可2. 所有覆写方法，必须加@Override注解3. 相同业务含义，相同参数类型才能使用java可变参数4. 外部依赖或者二方库依赖的接口，不能修改方法签名。接口过时必须用@Deprecated 注解，并说明新接口或者新服务是什么5. 不能使用过时的类或者方法6.  Object的equals方法容易抛出空指针，应使用常量或者确定值的对象来调用equals7. 所有整型包装类之间的值比较都用equals 方法比较8. 浮点数之间的等值判断，基本类型不能用==，包装类不能用equals。   解决方案：(1) 指定一个误差范围，两个浮点数的差值在此范围之内，则认为是相等的。            (2) 使用BigDecimal来定义值，再进行浮点数的运算操作。9. 定义DO类时，属性类型要数据库字段类型相匹配10. 防止精度丢失，禁止使用BigDecimal(double)方式将double对象转换成BigDecimal。建议使用BigDecimal的valueOf方法11. 基本类型和包装类型的使用标准    1.所有POJO的属性必须用包装类型    2.RPC方法的参数和返回值必须使用包装类型    3.所有局部变量使用基本变量12. 所有POJO 不要对其属性设置默认值13. 序列化类新增时不要修改其serialVersionUID字段14. 构造方法里禁止加任何业务处理逻辑，有要加在init()15. POJO类必须要写toString方法16. 禁止在POJO类中对属性xxx 同时存在isXxx()和getXxx()17. 使用索引访问用String的split方法得到数组时，需要对最后一个分隔符有无内容做检查18.   一个类有多个构造方法或者多个同名方法，要按照顺序来。19. 类中的方法顺序 ：共有方法-&gt; 私有方法 -&gt; get/set20. setter方法中参数名称和成员变量名称一致，不要在getter和setter方法中加业务逻辑21. 循环体内用StringBuilder的append方法进行扩展22. final可以修饰类，方法，变量。23. 慎用Object的clone方法24. 类成员与方法访问控制从严   1） 如果不允许外部直接通过new来创建对象，那么构造方法必须是private。        2） 工具类不允许有public或default构造方法。   3） 类非static成员变量并且与子类共享，必须是protected。   4） 类非static成员变量并且仅在本类使用，必须是private。   5） 类static成员变量如果仅在本类使用，必须是private。    6） 若是static成员变量，考虑是否为final。   7） 类成员方法只供类内部调用，必须是private。    8） 类成员方法只对继承类公开，那么限制为protected。\n集合处理\n12345678910111213141516171819202122232425261. hashCode和equals 的处理遵循以下规则：   1）只要覆写equals ，就必须要覆写hashCode   2）因为Set存储的是不重复的对象，依据hashCode和equals进行判断，所以Set存储的对象必须覆写这两个方法。   3）如果自定义对象作为Map的键，那么必须覆写hashCode和equals。2. ArrayList的subList结果不能强转ArrayList。3. 使用map的keySet()、values()、entrySet()方法返回对象后不可以对其进行添加元素的操作4. Collections类返回的对象，如：emptyList()/singletonList()等都是immutablelist不可对其进行添加或者删除元素的操作5. 在subList场景中，高度注意对原集合元素的增加或删除，均会导致子列表的遍历、增加、删除产生ConcurrentModificationException 异常6. 使用集合转数组的方法，必须使用集合的toArray(T[] array)，传入的是类型完全一致、长度为0的空数组7. 在使用Collection接口任何实现类的addAll()方法时，一定要对输入的集合做NEP判断8. 使用工具类Arrays.asList()把数组转换成集合时，不能使用其修改集合相关的方法，它的add/remove/clear方法会抛出UnsupportedOperationException异常   说明：asList的返回对象是一个Arrays内部类，并没有实现集合的修改方法。Arrays.asList体现的是适配器模式，只是转换接口，后台的数据仍是数组。9. 泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用add方法，而&lt;? super T&gt;不能使用get方法，作为接口调用赋值时易出错10. 在无泛型限制定义的集合赋值给泛型限制的集合时，在使用集合元素时，需要进行instanceof判断，避免抛出ClassCastException异常11. 不要在foreach循环里进行元素的remove/add操作。remove元素请使用Iterator方式，如果并发操作，需要对Iterator对象加锁12. 在JDK7 版本及以上，Comparator 实现类要满足如下三个条件，不然Arrays.sort，Collections.sort 会抛IllegalArgumentException 异常。    说明：三个条件如下     1） x，y 的比较结果和y，x 的比较结果相反。     2） x&gt;y，y&gt;z，则x&gt;z。     3） x=y，则x，z 比较结果和y，z 比较结果相同。13. 集合泛型定义时，在JDK7 及以上，使用diamond 语法或全省略。14. 集合初始化时，指定集合初始值大小。15. 使用entrySet 遍历Map 类集合KV，而不是keySet 方式进行遍历16. 高度注意Map类集合K/V能不能存储null值的情况，如下表格：17. 合理利用好集合的有序性(sort)和稳定性(order)，避免集合的无序性(unsort)和不稳定性(unorder)带来的负面影响。18. 利用Set元素唯一的特性，可以快速对一个集合进行去重操作，避免使用List的contains方法进行遍历、对比、去重操作\n并发处理\n123456789101112131415161718191. 获取单例对象需要保证线程安全，其中的方法也要保证线程安全。2. 创建线程或线程池时请指定有意义的线程名称，方便出错时回溯。3. 线程资源必须通过线程池提供，不允许在应用中自行显式创建线程4. 线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式，这样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险5. SimpleDateFormat 是线程不安全的类，一般不要定义为static变量，如果定义为static，必须加锁，或者使用DateUtils工具类。6. 必须回收自定义的ThreadLocal变量，尤其在线程池场景下，线程经常会被复用，如果不清理自定义的 ThreadLocal变量，可能会影响后续业务逻辑和造成内存泄露等问题。尽量在代理中使用try-finally块进行回收7. 高并发时，同步调用应该去考量锁的性能损耗。能用无锁数据结构，就不要用锁；能锁区块，就不要锁整个方法体；能用对象锁，就不要用类锁8. 对多个资源、数据库表、对象同时加锁时，需要保持一致的加锁顺序，否则可能会造成死锁。9. 在使用阻塞等待获取锁的方式中，必须在try代码块之外，并且在加锁方法与try代码块之间没有任何可能抛出异常的方法调用，避免加锁成功后，在finally中无法解锁。10. 在使用尝试机制来获取锁的方式中，进入业务代码块之前，必须先判断当前线程是否持有锁。锁的释放规则与锁的阻塞等待方式相同11. 并发修改同一记录时，避免更新丢失，需要加锁。要么在应用层加锁，要么在缓存加锁，要么在数据库层使用乐观锁，使用version作为更新依据12. 多线程并行处理定时任务时，Timer运行多个TimeTask时，只要其中之一没有捕获抛出的异常，其它任务便会自动终止运行，如果在处理定时任务时使用ScheduledExecutorService则没有这个问题13. 资金相关的金融敏感信息，使用悲观锁策略14. 使用CountDownLatch进行异步转同步操作，每个线程退出前必须调用countDown方法，线程执行代码注意catch异常，确保countDown方法被执行到，避免主线程无法执行至await方法，直到超时才返回结果15. 避免Random实例被多线程使用，虽然共享该实例是线程安全的，但会因竞争同一seed 导致的性能下降16. 在并发场景下，通过双重检查锁（double-checked locking）实现延迟初始化的优化问题隐患(可参考 The &quot;Double-Checked Locking is Broken&quot; Declaration)，推荐解决方案中较为简单一种（适用于JDK5及以上版本），将目标属性声明为 volatile型17. volatile解决多线程内存不可见问题。对于一写多读，是可以解决变量同步问题，但是如果多写，同样无法解决线程安全问题。18. HashMap在容量不够进行resize时由于高并发可能出现死链，导致CPU飙升，在开发过程中可以使用其它数据结构或加锁来规避此风险19. ThreadLocal对象使用static修饰，ThreadLocal无法解决共享对象的更新问题\n控制语句\n12345678910111213141516171819201. 在一个switch块内，每个case要么通过continue/break/return等来终止，要么注释说明程序将继续执行到哪一个case为止；在一个switch块内，都必须包含一个default语句并且放在最后，即使它什么代码也没有2. 当switch括号内的变量类型为String并且此变量为外部参数时，必须先进行null判断3. 在if/else/for/while/do语句中必须使用大括号4. 在高并发场景中，避免使用”等于”判断作为中断或退出的条件5. 表达异常的分支时，少用if-else方式6. 除常用方法（如getXxx/isXxx）等外，不要在条件判断中执行其它复杂的语句，将复杂逻辑判断的结果赋值给一个有意义的布尔变量名，以提高可读性7. 不要在其它表达式（尤其是条件表达式）中，插入赋值语句8. 循环体中的语句要考量性能，以下操作尽量移至循环体外处理，如定义对象、变量、获取数据库连接，进行不必要的try-catch操作（这个try-catch是否可以移至循环体外）。9. 避免采用取反逻辑运算符10. 接口入参保护，这种场景常见的是用作批量操作的接口11. 下列情形，需要进行参数校验：      1） 调用频次低的方法。     2） 执行时间开销很大的方法。此情形中，参数校验时间几乎可以忽略不计，但如果因为参数错误导致 中间执行回退，或者错误，那得不偿失。     3） 需要极高稳定性和可用性的方法。      4） 对外提供的开放接口，不管是RPC/API/HTTP接口。     5） 敏感权限入口。12. 下列情形，不需要进行参数校验：     1） 极有可能被循环调用的方法。但在方法说明里必须注明外部参数检查要求。      2） 底层调用频度比较高的方法。毕竟是像纯净水过滤的最后一道，参数错误不太可能到底层才会暴露问题。一般DAO层与Service层都在同一个应用中，部署在同一台服务器中，所以DAO的参数校验，可以省略。     3） 被声明成private只会被自己代码所调用的方法，如果能够确定调用方法的代码传入参数已经做过检查或者肯定不会有问题，此时可以不校验参数。\n注释规范\n12345678910111. 类、类属性、类方法的注释必须使用Javadoc规范，使用/**内容*/格式，不得使用// xxx方式2. 所有的抽象方法（包括接口中的方法）必须要用Javadoc注释、除了返回值、参数、异常说明外，还必须指出该方法做什么事情，实现什么功能3. 所有的类都必须添加创建者和创建日期4. 方法内部单行注释，在被注释语句上方另起一行，使用//注释。方法内部多行注释使用/* */注释，注意与代码对齐5. 所有的枚举类型字段必须要有注释，说明每个数据项的用途6. 与其“半吊子”英文来注释，不如用中文注释把问题说清楚。专有名词与关键字保持英文原文即可。7. 代码修改的同时，注释也要进行相应的修改，尤其是参数、返回值、异常、核心逻辑等的修改8. 谨慎注释掉代码。在上方详细说明，而不是简单地注释掉。如果无用，则删除。9. 对于注释的要求：第一、能够准确反映设计思想和代码逻辑；第二、能够描述业务含义，使别的程序员能够迅速了解到代码背后的信息。完全没有注释的大段代码对于阅读者形同天书，注释是给自己看的，即使隔很长时间，也能清晰理解当时的思路；注释也是给继任者看的，使其能够快速接替自己的工作。10. 好的命名、代码结构是自解释的，注释力求精简准确、表达到位。避免出现注释的一个极端：过多过滥的注释，代码的逻辑一旦修改，修改注释是相当大的负担11. 特殊注释标记，请注明标记人与标记时间。注意及时处理这些标记，通过标记扫描，经常清理此类标记。线上故障有时候就是来源于这些标记处的代码\n其他\n1234567891. 在使用正则表达式时，利用好其预编译功能，可以有效加快正则匹配速度2. velocity调用POJO类的属性时，直接使用属性名取值即可，模板引擎会自动按规范调用POJO的getXxx()，如果是boolean基本数据类型变量（boolean命名不需要加is前缀），会自动调用isXxx()方法3. 后台输送给页面的变量必须加$!&#123;var&#125;——中间的感叹号4. 注意 Math.random() 这个方法返回是double类型，注意取值的范围 0≤x&lt;1（能够取到零值，注意除零异常），如果想获取整数类型的随机数，不要将x放大10的若干倍然后取整，直接使用Random对象的nextInt或者nextLong方法5. 获取当前毫秒数System.currentTimeMillis(); 而不是new Date().getTime();6. 日期格式化时，传入pattern中表示年份统一使用小写的y7. 不要在视图模板中加入任何复杂的逻辑8. 任何数据结构的构造或初始化，都应指定大小，避免数据结构无限增长吃光内存9. 及时清理不再使用的代码段或配置信息\n异常日志\n异常处理\n12345678910111213141516171819201. java类库中定义的可以通过预检查方式规避的RuntimeException异常不应该通过catch方式处理。如NullPointException、IndexOutOfBoundsException。2. 异常不要用作流程控制、条件控制。3. catch是要分清是稳定代码和非稳定代码，对于非稳定代码catch尽可能的按照异常类型分类。4. 捕获异常一定要做处理，如果不想处理就抛给上层调用者。5. 有try块放在事务中，catch异常后如果需要回滚事务，一定要注意手动回滚事务。6. finally块中必须对资源对象、流对象进行关闭，有异常也要catch。7. 不要在finally块中使用return8. 捕获的异常要和抛的异常匹配或者捕获的异常是抛异常的父类9. 在调用RPC、二方包、或动态生成类的相关方法时，捕获异常一定要用Throwable类拦截10. 方法的返回值可以是null，但是必须要说明什么情况返回null11. 防止NEP：    1. 返回类型是基本类型 ，return包装类型的对象。    2. 数据库查询的结果可能是null    3. 集合里的元素即时isNotEmpty，取出来的元素也可能是null    4. 远程调用返回对象时，必须要进行判空处理    5. 对于Session中的数据要进行判空处理    6. 级联调用有可能产生空指针12. 定义时区分unchecked / checked 异常，避免直接抛出new RuntimeException()，更不允许抛出Exception或者Throwable，应使用有业务含义的自定义异常。推荐业界已定义过的自定义异常，如：DAOException / ServiceException等13. 对于公司外的http/api开放接口必须使用“错误码”；而应用内部推荐异常抛出；跨应用间RPC调用优先考虑使用Result方式，封装isSuccess()方法、“错误码”、“错误简短信息”14. 避免出现重复的代码（Don&#x27;t Repeat Yourself），即DRY原则\n日志规约\n123456789101. 应用中不可直接使用日志系统（Log4j、Logback）中的API，而应依赖使用日志框架 SLF4J中的API，使用门面模式的日志框架，有利于维护和各个类的日志处理方式统一2. 所有日志文件至少保存15天，因为有些异常具备以“周”为频次发生的特点。网络运行状态、安全相关信息、系统监测、管理后台操作、用户敏感操作需要留存相关的网络日志不少于6个月3. 应用中的扩展日志（如打点、临时监控、访问日志等）命名方式：appName_logType_logName.log。logType:日志类型，如stats/monitor/access等；logName:日志描述。这种命名的好处：通过文件名就可知道日志文件属于什么应用，什么类型，什么目的，也有利于归类查找4. 在日志输出时，字符串变量之间的拼接使用占位符的方式5. 对于trace/debug/info级别的日志输出，必须进行日志级别的开关判断6. 避免重复打印日志，浪费磁盘空间，务必在log4j.xml中设置additivity=false7. 异常信息应该包括两类信息：案发现场信息和异常堆栈信息。如果不处理，那么通过关键字throws往上抛出8. 谨慎地记录日志。生产环境禁止输出debug日志；有选择地输出info日志；如果使用warn来记录刚上线时的业务行为信息，一定要注意日志输出量的问题，避免把服务器磁盘撑爆，并记得及时删除这些观察日志9.  可以使用warn日志级别来记录用户输入参数错误的情况，避免用户投诉时，无所适从。如非必要，请不要在此场景打出error级别，避免频繁报警10. 尽量用英文来描述日志错误信息，如果日志中的错误信息用英文描述不清楚的话使用中文描述即可，否则容易产生歧义。【强制】国际化团队或海外部署的服务器由于字符集问题，使用全英文来注释和描述日志错误信息\n单元测试\n123456789101112131415161. 好的单元测试必须遵守AIR原则2. 单元测试应该是全自动执行的，并且非交互式的。测试用例通常是被定期执行的，执行过程必须完全自动化才有意义。输出结果需要人工检查的测试不是一个好的单元测试。单元测试中不准使用System.out来进行人肉验证，必须使用assert来验证3. 保持单元测试的独立性。为了保证单元测试稳定可靠且便于维护，单元测试用例之间决不能互相调用，也不能依赖执行的先后次序4. 单元测试是可以重复执行的，不能受到外界环境的影响5. 对于单元测试，要保证测试粒度足够小，有助于精确定位问题。单测粒度至多是类级别，一般是方法级别6. 核心业务、核心应用、核心模块的增量代码确保单元测试通过7. 单元测试代码必须写在如下工程目录：src/test/java，不允许写在业务代码目录下8. 单元测试的基本目标：语句覆盖率达到70%；核心模块的语句覆盖率和分支覆盖率都要达到100%9. 编写单元测试代码遵守BCDE原则，以保证被测试模块的交付质量10. 对于数据库相关的查询，更新，删除等操作，不能假设数据库里的数据是存在的，或者直接操作数据库把数据插入进去，请使用程序插入或者导入数据的方式来准备数据11. 和数据库相关的单元测试，可以设定自动回滚机制，不给数据库造成脏数据。或者对单元测试产生的数据有明确的前后缀标识12. 对于不可测的代码在适当的时机做必要的重构，使代码变得可测，避免为了达到测试要求而书写不规范测试代码13. 在设计评审阶段，开发人员需要和测试人员一起确定单元测试范围，单元测试最好覆盖所有测试用例14. 单元测试作为一种质量保障手段，在项目提测前完成单元测试，不建议项目发布后补充单元测试用例15. 为了更方便地进行单元测试，业务代码应避免以下情况： 1.构造方法中做的事情过多。 2. 存在过多的全局变量和静态方法。 3. 存在过多的外部依赖。 4. 存在过多的条件语句16. 那是测试同学干的事情。本文是开发手册，凡是本文内容都是与开发同学强相关的。 1. 单元测试代码是多余的。系统的整体功能与各单元部件的测试正常与否是强相关的。 2. 单元测试代码不需要维护。一年半载后，那么单元测试几乎处于废弃状态。 3. 单元测试与线上故障没有辩证关系。好的单元测试能够最大限度地规避线上故障\n安全规约\n123456781. 隶属于用户个人的页面或者功能必须进行权限控制校验2. 用户敏感数据禁止直接展示，必须对展示数据进行脱敏3. 用户输入的SQL参数严格使用参数绑定或者METADATA字段值限定，防止SQL注入，禁止字符串拼接SQL访问数据库4. 用户请求传入的任何参数必须做有效性验证5. 禁止向HTML页面输出未经安全过滤或未正确转义的用户数据6. 表单、AJAX提交必须执行CSRF安全验证7. 在使用平台资源，譬如短信、邮件、电话、下单、支付，必须实现正确的防重放的机制，如数量限制、疲劳度控制、验证码校验，避免被滥刷而导致资损8. 发贴、评论、发送即时消息等用户生成内容的场景必须实现防刷、文本内容违禁词过滤等风控策略\nMySQL数据库\n建表规约\n1234567891011121314151. 表达是与否概念的字段，必须使用is_xxx的方式命名，数据类型是unsigned tinyint（1表示是，0表示否）2. 表名、字段名必须使用小写字母或数字，禁止出现数字开头，禁止两个下划线中间只出现数字。数据库字段名的修改代价很大，因为无法进行预发布，所以字段名称需要慎重考虑3. 表名不使用复数名词4. 禁用保留字，如desc、range、match、delayed等，请参考MySQL官方保留字5. 主键索引名为pk_字段名；唯一索引名为uk_字段名；普通索引名则为idx_字段名6. 小数类型为decimal，禁止使用float和double7. 如果存储的字符串长度几乎相等，使用char定长字符串类型8. varchar是可变长字符串，不预先分配存储空间，长度不要超过5000，如果存储长度大于此值，定义字段类型为text，独立出来一张表，用主键来对应，避免影响其它字段索引效率9. 表必备三字段：id, create_time, update_time10. 表的命名最好是遵循“业务名称_表的作用”11. 库名与应用名称尽量一致12. 字段允许适当冗余，以提高查询性能，但必须考虑数据一致。冗余字段应遵循： 1） 不是频繁修改的字段。 2） 不是varchar超长字段，更不能是text字段。3） 不是唯一索引的字段。13. 如果修改字段含义或对字段表示的状态追加时，需要及时更新字段注释14. 单表行数超过500万行或者单表容量超过2GB，才推荐进行分库分表15. 合适的字符存储长度，不但节约数据库表空间、节约索引存储，更重要的是提升检索速度\n索引规约\n12345678910111. 业务上具有唯一特性的字段，即使是多个字段的组合，也必须建成唯一索引2. 超过三个表禁止join。需要join的字段，数据类型必须绝对一致；多表关联查询时，保证被关联的字段需要有索引3. 在varchar字段上建立索引时，必须指定索引长度，没必要对全字段建立索引，根据实际文本区分度决定索引长度即可4. 页面搜索严禁左模糊或者全模糊，如果需要请走搜索引擎来解决5. 如果有order by的场景，请注意利用索引的有序性。order by 最后的字段是组合索引的一部分，并且放在索引组合顺序的最后，避免出现file_sort的情况，影响查询性能6. 利用覆盖索引来进行查询操作，避免回表7. 利用延迟关联或者子查询优化超多分页场景8. SQL性能优化的目标：至少要达到 range 级别，要求是ref级别，如果可以是consts最好9. 建组合索引的时候，区分度最高的在最左边10. 防止因字段类型不同造成的隐式转换，导致索引失效11. 创建索引时避免有如下极端误解： 1） 宁滥勿缺。认为一个查询就需要建一个索引。 2） 宁缺勿滥。认为索引会消耗空间、严重拖慢记录的更新以及行的新增速度。 3） 抵制惟一索引。认为业务的惟一性一律需要在应用层通过“先查后插”方式解决。\nSQL语句\n12345678910111. 不要使用count(列名)或count(常量)来替代count(*)，count(*)是SQL92定义的标准统计行数的语法，跟数据库无关，跟NULL和非NULL无关2. count(distinct col) 计算该列除NULL之外的不重复行数，注意 count(distinct col1, col2) 如果其中一列全为NULL，那么即使另一列有不同的值，也返回为03. 当某一列的值全是NULL时，count(col)的返回结果为0，但sum(col)的返回结果为NULL，因此使用sum()时需注意NPE问题4. 使用ISNULL()来判断是否为NULL值5. 代码中写分页查询逻辑时，若count为0应直接返回，避免执行后面的分页语句6. 不得使用外键与级联，一切外键概念必须在应用层解决7. 禁止使用存储过程，存储过程难以调试和扩展，更没有移植性8. 数据订正（特别是删除、修改记录操作）时，要先select，避免出现误删除，确认无误才能执行更新语句9. in操作能避免则避免，若实在避免不了，需要仔细评估in后边的集合元素数量，控制在1000个之内10. 如果有国际化需要，所有的字符存储与表示，均以utf-8编码，注意字符统计函数的区别11. TRUNCATE TABLE 比 DELETE 速度快，且使用的系统和事务日志资源少，但TRUNCATE无事务且不触发trigger，有可能造成事故，故不建议在开发代码中使用此语句\nORM映射\n123456789101. 在表查询中，一律不要使用 * 作为查询的字段列表，需要哪些字段必须明确写明2. POJO类的布尔属性不能加is，而数据库字段必须加is_，要求在resultMap中进行字段与属性之间的映射3. 不要用resultClass当返回参数，即使所有类属性名与数据库字段一一对应，也需要定义；反过来，每一个表也必然有一个POJO类与之对应4. sql.xml配置参数使用：#&#123;&#125;，#param# 不要使用$&#123;&#125; 此种方式容易出现SQL注入5. iBATIS自带的queryForList(String statementName,int start,int size)不推荐使用6. 不允许直接拿HashMap与Hashtable作为查询结果集的输出7. 更新数据表记录时，必须同时更新记录对应的gmt_modified字段值为当前时间8. 不要写一个大而全的数据更新接口。传入为POJO类，不管是不是自己的目标更新字段，都进行update table set c1=value1,c2=value2,c3=value3; 这是不对的。执行SQL时，不要更新无改动的字段，一是易出错；二是效率低；三是增加binlog存储9. @Transactional事务不要滥用。事务会影响数据库的QPS，另外使用事务的地方需要考虑各方面的回滚方案，包括缓存回滚、搜索引擎回滚、消息补偿、统计修正等10. &lt;isEqual&gt;中的compareValue是与属性值对比的常量，一般是数字，表示相等时带上此条件；&lt;isNotEmpty&gt;表示不为空且不为null时执行；&lt;isNotNull&gt;表示不为null值时执行\n工程结构\n应用分层\n123456781. 默认上层依赖于下层，箭头关系表示可直接依赖，如：开放接口层可以依赖于Web层，也可以直接依赖于Service层，依此类推 2.（分层异常处理规约）在DAO层，产生的异常类型有很多，无法用细粒度的异常进行catch，使用catch(Exception e)方式，并throw new DAOException(e)，不需要打印日志，因为日志在Manager/Service层一定需要捕获并打印到日志文件中去，如果同台服务器再打日志，浪费性能和存储。在Service层出现异常时，必须记录出错日志到磁盘，尽可能带上参数信息，相当于保护案发现场。如果Manager层与Service同机部署，日志方式与DAO层处理一致，如果是单独部署，则采用与Service一致的处理方式。Web层绝不应该继续往上抛异常，因为已经处于顶层，如果意识到这个异常将导致页面无法正常渲染，那么就应该直接跳转到友好错误页面，加上用户容易理解的错误提示信息。开放接口层要将异常处理成错误码和错误信息方式返回。 3. • DO（Data Object）：此对象与数据库表结构一一对应，通过DAO层向上传输数据源对象。     • DTO（Data Transfer Object）：数据传输对象，Service或Manager向外传输的对象。     • BO（Business Object）：业务对象，由Service层输出的封装业务逻辑的对象。    • AO（Application Object）：应用对象，在Web层与Service层之间抽象的复用对象模型，极为贴近展示层，复用度不高。     • VO（View Object）：显示层对象，通常是Web向模板渲染引擎层传输的对象。     • Query：数据查询对象，各层接收上层的查询请求。注意超过2个参数的查询封装，禁止使用Map类来传输。\n二方库依赖\n123456789101112131415161718191.定义GAV遵从以下规则： 1） GroupID格式：com.&#123;公司/BU &#125;.业务线 [.子业务线]，最多4级。 说明：&#123;公司/BU&#125; 例如：alibaba/taobao/tmall/aliexpress等BU一级；子业务线可选。 正例：com.taobao.jstorm 或 com.alibaba.dubbo.register  2） ArtifactID格式：产品线名-模块名。语义不重复不遗漏，先到中央仓库去查证一下。 正例：dubbo-client / fastjson-api / jstorm-tool  3） Version：详细规定参考下方2. 二方库版本号命名方式：主版本号.次版本号.修订号  1）主版本号：产品方向改变，或者大规模API不兼容，或者架构不兼容升级。  2） 次版本号：保持相对兼容性，增加主要功能特性，影响范围极小的API不兼容修改。  3） 修订号：保持完全兼容性，修复BUG、新增次要功能特性等。3. 线上应用不要依赖SNAPSHOT版本（安全包除外）4. 二方库的新增或升级，保持除功能点之外的其它jar包仲裁结果不变。如果有改变，必须明确评估和验证5. 二方库里可以定义枚举类型，参数可以使用枚举类型，但是接口返回值不允许使用枚举类型或者包含枚举类型的POJO对象6. 依赖于一个二方库群时，必须定义一个统一的版本变量，避免版本号不一致7. 禁止在子项目的pom依赖中出现相同的GroupId，相同的ArtifactId，但是不同的Version8. 底层基础技术框架、核心数据管理平台、或近硬件端系统谨慎引入第三方实现9. 所有pom文件中的依赖声明放在&lt;dependencies&gt;语句块中，所有版本仲裁放在&lt;dependencyManagement&gt;语句块中10. 二方库不要有配置项，最低限度不要再增加配置项11.为避免应用二方库的依赖冲突问题，二方库发布者应当遵循以下原则：                1）精简可控原则。移除一切不必要的API和依赖，只包含 Service API、必要的领域模型对象、Utils类、常量、枚举等。如果依赖其它二方库，尽量是provided引入，让二方库使用者去依赖具体版本号；无log具体实现，只依赖日志框架。    2）稳定可追溯原则。每个版本的变化应该被记录，二方库由谁维护，源码在哪里，都需要能方便查到。除非用户主动升级版本，否则公共二方库的行为不应该发生变化。\n服务器\n123451. 高并发服务器建议调小TCP协议的time_wait超时时间2. 调大服务器所支持的最大文件句柄数（File Descriptor，简写为fd）3. 给JVM环境参数设置-XX:+HeapDumpOnOutOfMemoryError参数，让JVM碰到OOM场景时输出dump信息4. 在线上生产环境，JVM的Xms和Xmx设置一样大小的内存容量，避免在GC 后调整堆大小带来的压力5. 服务器内部重定向使用forward；外部重定向地址使用URL拼装工具类来生成，否则会带来URL维护不一致的问题和潜在的安全风险\n设计规约\n1234567891011121314151617181920212223241. 存储方案和底层数据结构的设计获得评审一致通过，并沉淀成为文档2. 在需求分析阶段，如果与系统交互的User超过一类并且相关的User Case超过5个，使用用例图来表达更加清晰的结构化需求3. 如果某个业务对象的状态超过3个，使用状态图来表达并且明确状态变化的各个触发条件4. 如果系统中某个功能的调用链路上的涉及对象超过3个，使用时序图来表达并且明确各调用环节的输入与输出5. 如果系统中模型类超过5个，并且存在复杂的依赖关系，使用类图来表达并且明确类之间的关系6. 如果系统中超过2个对象之间存在协作关系，并且需要表示复杂的处理流程，使用活动图来表示7. 需求分析与系统设计在考虑主干功能的同时，需要充分评估异常流程与业务边界8. 类在设计与实现时要符合单一原则9. 谨慎使用继承的方式来进行扩展，优先使用聚合/组合的方式来实现10. 系统设计时，根据依赖倒置原则，尽量依赖抽象类与接口，有利于扩展与维护11. 系统设计时，注意对扩展开放，对修改闭合12. 系统设计阶段，共性业务或公共行为抽取出来公共模块、公共配置、公共类、公共方法等，避免出现重复代码或重复配置的情况13. 避免如下误解：敏捷开发 = 讲故事 + 编码 + 发布14. 系统设计主要目的是明确需求、理顺逻辑、后期维护，次要目的用于指导编码15. 设计的本质就是识别和表达系统难点，找到系统的变化点，并隔离变化点16. 系统架构设计的目的：    1.确定系统边界。确定系统在技术层面上的做与不做。    2.确定系统内模块之间的关系。确定模块之间的依赖关系及模块的宏观输入与输出。     3.确定指导后续设计与演化的原则。使后续的子系统或模块设计在规定的框架内继续演化。     4.确定非功能性需求。非功能性需求是指安全性、可用性、可扩展性等17. 在做无障碍产品设计时，需要考虑到：    1. 所有可交互的控件元素必须能被tab键聚焦，并且焦点顺序需符合自然操作逻辑。    2.用于登陆校验和请求拦截的验证码均需提供图形验证以外的其它方式。               3.自定义的控件类型需明确交互方式。","plink":"http://www.crudboy.cn/2021/06/25/阿里巴巴编码规范/"},{"title":"Git","date":"2021-06-25T20:22:34.887Z","date_formatted":{"ll":"Jun 25, 2021","L":"06/25/2021","MM-DD":"06-25"},"updated":"2021-06-25T12:22:34.887Z","content":"\n认识 Git\nGit 简史\nLinux 内核项目组当时使用分布式版本控制系统 BitKeeper 来管理和维护代码。但是，后来开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统，而且对新的版本控制系统做了很多改进。\nGit 与其他版本管理系统的主要区别\nGit 在保存和对待各种信息的时候与其它版本控制系统有很大差异，尽管操作起来的命令形式非常相近，理解这些差异将有助于防止你使用中的困惑。\n下面我们主要说一个关于 Git 其他版本管理系统的主要差别：对待数据的方式。\nGit采用的是直接记录快照的方式，而非差异比较。我后面会详细介绍这两种方式的差别。\n大部分版本控制系统（CVS、Subversion、Perforce、Bazaar 等等）都是以文件变更列表的方式存储信息，这类系统将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。\n具体原理如下图所示，理解起来其实很简单，每个我们对提交更新一个文件之后，系统记录都会记录这个文件做了哪些更新，以增量符号Δ(Delta)表示。\n\n我们怎样才能得到一个文件的最终版本呢？\n很简单，高中数学的基本知识，我们只需要将这些原文件和这些增加进行相加就行了。\n这种方式有什么问题呢？\n比如我们的增量特别特别多的话，如果我们要得到最终的文件是不是会耗费时间和性能。\nGit 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 快照流。\n\nGit 的三种状态\nGit 有三种状态，你的文件可能处于其中之一：\n\n已提交（committed）：数据已经安全的保存在本地数据库中。\n已修改（modified）：已修改表示修改了文件，但还没保存到数据库中。\n已暂存（staged）：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。\n\n由此引入 Git 项目的三个工作区域的概念：**Git 仓库(.git directoty)**、工作目录(Working Directory) 以及 暂存区域(Staging Area) 。\n\n基本的 Git 工作流程如下：\n\n在工作目录中修改文件。\n暂存文件，将文件的快照放入暂存区域。\n提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。\n\nGit 使用快速入门\n获取 Git 仓库\n有两种取得 Git 项目仓库的方法。\n\n在现有目录中初始化仓库: 进入项目目录运行 git init 命令,该命令将创建一个名为 .git 的子目录。\n从一个服务器克隆一个现有的 Git 仓库: git clone [url] 自定义本地仓库的名字: git clone [url] directoryname\n\n记录每次更新到仓库\n\n检测当前文件状态 : git status\n提出更改（把它们添加到暂存区）：git add filename  (针对特定文件)、git add *(所有文件)、git add *.txt（支持通配符，所有 .txt 文件）\n忽略文件：.gitignore 文件\n提交更新: git commit -m &quot;代码提交信息&quot; （每次准备提交前，先用 git status 看下，是不是都已暂存起来了， 然后再运行提交命令 git commit）\n跳过使用暂存区域更新的方式 : git commit -a -m &quot;代码提交信息&quot;。 git commit 加上 -a 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 git add 步骤。\n移除文件 ：git rm filename （从暂存区域移除，然后提交。）\n对文件重命名 ：git mv README.md README(这个命令相当于mv README.md README、git rm README.md、git add README 这三条命令的集合)\n\n一个好的 Git 提交消息\n一个好的 Git 提交消息如下：\n12345标题行：用这一行来描述和解释你的这次提交主体部分可以是很少的几行，来加入更多的细节来解释提交，最好是能给出一些相关的背景或者解释这个提交能修复和解决什么问题。主体部分当然也可以有几段，但是一定要注意换行和句子不要太长。因为这样在使用 &quot;git log&quot; 的时候会有缩进比较好看。Copy to clipboardErrorCopied\n提交的标题行描述应该尽量的清晰和尽量的一句话概括。这样就方便相关的 Git 日志查看工具显示和其他人的阅读。\n推送改动到远程仓库\n\n\n如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：·git remote add origin &lt;server&gt; ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样git remote add origin https://github.com/Snailclimb/test.git\n\n\n将这些改动提交到远端仓库：git push origin master (可以把 master 换成你想要推送的任何分支)\n如此你就能够将你的改动推送到所添加的服务器上去了。\n\n\n远程仓库的移除与重命名\n\n将 test 重命名位 test1：git remote rename test test1\n移除远程仓库 test1:git remote rm test1\n\n查看提交历史\n在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 git log 命令。git log 会按提交时间列出所有的更新，最近的更新排在最上面。\n可以添加一些参数来查看自己希望看到的内容：\n只看某个人的提交记录：\n1git log --author=bobCopy to clipboardErrorCopied\n撤销操作\n有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 --amend 选项的提交命令尝试重新提交：\n1git commit --amendCopy to clipboardErrorCopied\n取消暂存的文件\n1git reset filenameCopy to clipboardErrorCopied\n撤消对文件的修改:\n1git checkout -- filenameCopy to clipboardErrorCopied\n假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：\n12git fetch origingit reset --hard origin/masterCopy to clipboardErrorCopied\n分支\n分支是用来将特性开发绝缘开来的。在你创建仓库的时候，master 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。\n我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。\n创建一个名字叫做 test 的分支\n1git branch testCopy to clipboardErrorCopied\n切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）\n1git checkout testCopy to clipboardErrorCopied\n\n你也可以直接这样创建分支并切换过去(上面两条命令的合写)\n1git checkout -b feature_xCopy to clipboardErrorCopied\n切换到主分支\n1git checkout masterCopy to clipboardErrorCopied\n合并分支(可能会有冲突)\n1git merge testCopy to clipboardErrorCopied\n把新建的分支删掉\n1git branch -d feature_xCopy to clipboardErrorCopied\n将分支推送到远端仓库（推送成功后其他人可见）：\n1git push origin Copy to clipboardErrorCopied\n","plink":"http://www.crudboy.cn/2021/06/25/认识 Git/"},{"title":"你是怎样变得不\"浮躁\"的?","date":"2021-06-25T20:22:34.881Z","date_formatted":{"ll":"Jun 25, 2021","L":"06/25/2021","MM-DD":"06-25"},"updated":"2021-06-25T12:22:34.881Z","content":"\n解铃还须系铃人。\n越来越多的人被这一根根隐形的“绳子”系住，这些绳子都来自哪里呢？\n\n金钱绳：当你的花呗越欠越多，你却依旧控制不住买买买的手；\n抱怨绳：当你不满足于现状，而你只会嘴上抱怨，甚至口吐芬芳；\n嫉妒绳：当你在刷小视频的时候，看到别人功成名就，你却只能评论“爸爸，你还缺儿子吗？”。\n… …\n\n\n其实我们不用太担忧，在这个时代，“浮躁”已经成为年轻人的一个标签，不浮躁的人亦是难能可贵。\n所以，请你给我5分钟的耐心，接下来，我会教会你，如何解开这些绳子，如何让你变得不浮躁。\n“一”个反思\n1、反思自己浮躁的原因\n第一步，请你闭上眼睛，花10秒钟的时间，在心里罗列出自己变得浮躁的原因。\n接下来，我们要直面问题。上学的时候，老师教会我们，做题目时一定要认真审题。现在也是一样，只有认清自己的问题，问题才可以得到解决。\n\n相信大多数人都会把原因归咎于快节奏时代。\n\n你可能会讲：\n因为这个时代发展得太快了，我们必须跑起来，但是我们的压力越来越大。\n因为这个快节奏的时代，让我们的情绪变化的很快，精神上的空缺也越来越大，所以我们会变得浮躁。\n因为快节奏时代，……\n\n不，不是这样的。我不是这样认为的，我不认为时代的变化要为我们的浮躁背锅。\n快节奏时代只是影响了我们，而非主要原因。时代总要进步，这是未来的发展趋势。\n我们不能阻止时代前进的脚步，但是我们可以阻止自己变得浮躁。\n\n“五”个不要\n1、不要把抱怨的话挂在口头\n无休止的抱怨不仅让自己的心情变差，还会影响其他人。心理学上把这种现象叫做“情绪链”，也可以叫做“情绪传染”，它所指的是一个人的坏心情会影响到几个人的好心情。\n2、不要急功近利\n求稳不求快。定一定心，学会脚踏实地，你走的每一步都算数。你要知道，日积月累也是需要时间的。\n3、不要好高骛远\n认清自己的现状，设立一个可行性的目标，做好未来规划。\n4、不要轻易且不负责任地评价他人\n不要冲动给出评价，因为你无法契合当事人的情感。\n说话之道关系着人际关系，而人际关系非常容易影响一个人的情绪波动，它可以无坚不摧，也可以在一瞬间分崩离析。\n因此，对自己听到看到的所有事，坚守一个原则——话可以全听，但不能全信；饭可以乱吃，话不能乱讲。\n\n5、不要过度依赖智能产品\n如果你一天中超过8个小时盯着智能产品，那么你的喜怒哀乐，消极乐观等种种情绪都是来自于智能产品。\n你只会越来越依赖智能产品，并且行为上会变得逐渐懒惰。在智能产品里，你能够快速地体验到快乐。\n回过头来，当你回归生活时，你会发现你的耐心值在下降，人会越来越浮躁。\n**试着慢慢减少使用智能产品的时间。**可以学习一样新技能，比如说做菜、插画等，以此来转移自己的注意力。\n\n“七”个追求\n1、追求规律作息和饮食\n规律的作息时间和饮食习惯决定一个人的精神面貌和精神状态。\n2、追求运动\n坚持运动，运动是一种天然有效的抗焦虑治疗方法。它可缓解紧张和压力，增强身体和精神能量，并通过释放内啡肽来增强健康。\n3、追求空余时间的放空\n\n可以盯着窗外看远方，配上纯音乐，让自己放空一会。\n趁着自己喜欢的天气，可以自己一个人坐公交车，从起点做到终点。\n傍晚的时候去健身公园，散个步。\n选一天，看日出或者看日落，你会发自内心地体验到舒适感。\n空余时间可以看影片或者书籍。影片选择豆瓣高分电影，书籍不要选择言情小说。\n没事的时候，双击一下屏幕也可。趁现在，赶紧试一试吧。\n\n4、追求良好的心态\n\n向比你优秀、比你有钱的人取经，而不是一味的羡慕嫉妒。\n接受自己的平凡，打造平凡可贵的自己。可以永远热爱生活，也可以与生活死磕到底。做完选择，就要付出行动。\n\n学会如何调整心态真的无比重要！\n\n5、追求工匠精神\n不管是在学习还是生活中，我们都要追求专心致志、精益求精、大胆创新的精神。做到认清自我，突破自我，匠心自我！\n6、追求有效性\n有效性包括效率和效果。意味着执行任何事，我们要求效率和效果成正比。如果单单侧重于某一项，那么就会打破平衡。\n7、追求理性消费\n捂紧自己的钱包比什么都重要。建立自己的存款，总有一天会派上用场。\n\n朋友，请不要处于一个糟糕的循环里很久很久，你要慢慢开始好起来，不要觉得不行就想要放弃，那样你以后肯定不甘心，一定要相信自己能行自己可以，保持这种心境能促使自己做成挺多事情。 —— 南枫翊\n\n读到这里的人，我已经告诉你解绳子的方法，真正去解开绳子的那个人必须是你自己啊！\n作者：Echo\n链接：https://www.zhihu.com/question/264122691/answer/1324245036\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。\n","plink":"http://www.crudboy.cn/2021/06/25/你是怎样变得不_浮躁_的/"},{"title":"Docker 命令","date":"2021-06-25T20:22:34.870Z","date_formatted":{"ll":"Jun 25, 2021","L":"06/25/2021","MM-DD":"06-25"},"updated":"2021-06-25T12:22:34.870Z","content":"\n查看docker信息（version、info）\n12345# 查看docker版本 docker version # 显示docker系统的信息 docker info\n对image的操作（search、pull、images、rmi、history）\n12345678910111213# 检索image docker search image_name# 下载image docker pull image_name #列出镜像列表; -a, --all=false Show all images; --no-trunc=false Don&#x27;t truncate output; -q, --quiet=false Only show numeric IDs docker images# 删除一个或者多个镜像; -f, --force=false Force; --no-prune=false Do not delete untagged parents docker rmi image_name # 显示一个镜像的历史; --no-trunc=false Don&#x27;t truncate output; -q, --quiet=false Only show numeric IDs docker history image_id\n启动容器（run）\ndocker容器可以理解为在沙盒中运行的进程。这个沙盒包 含了该进程运行所必须的资源，包括文件系统、系统类库、shell 环境等等。但这个沙盒默认是不会运行任何程序的。你需要在沙盒中运行一个进程来启动某一个容器。这个进程是该容器的唯一进程，所以当该进程结束的时候，容 器也会完全的停止。\n1234567891011# 在容器中运行&quot;echo&quot;命令，输出&quot;hello word&quot; docker run image_name echo &quot;hello word&quot; # 交互式进入容器中 docker run -i -t image_name /bin/bash # 在容器中安装新的程序 docker run image_name apt-get install -y app_name# 在一次进刚才进入的容器docker exec -i -t [容器ID]\nNote： 在执行apt-get 命令的时候，要带上-y参数。如果不指定-y参数的话，apt-get命令会进入交互模式，需要用户输入命令来进行确认，但在docker环境中是无法响 应这种交互的。apt-get 命令执行完毕之后，容器就会停止，但对容器的改动不会丢失。\n查看容器（ps）\n12345678# 列出当前所有正在运行的container docker ps # 列出所有的container docker ps -a # 列出最近一次启动的container docker ps -l\n保存对容器的修改（commit）\n当你对某一个容器做了修改之后（通过在容器中运行某一个命令），可以把对容器的修改保存下来，这样下次可以从保存后的最新状态运行该容器。\n12# 保存对容器的修改; -a, --author=&quot;&quot; Author; -m, --message=&quot;&quot; Commit message docker commit ID new_image_name\n对容器的操作（rm、stop、start、kill、logs、diff、top、cp、restart、attach)\n1234567891011121314151617181920212223242526272829# 删除所有容器 docker rm `docker ps -a -q`    # 删除单个容器; -f, --force=false; -l, --link=false Remove the specified link and not the underlying container; -v, --volumes=false Remove the volumes associated to the container docker rm Name/ID    # 停止、启动、杀死一个容器 docker stop Name/ID docker start Name/ID docker kill Name/ID    # 从一个容器中取日志; -f, --follow=false Follow log output; -t, --timestamps=false Show timestamps docker logs Name/ID    # 列出一个容器里面被改变的文件或者目录，list列表会显示出三种事件，A 增加的，D 删除的，C 被改变的 docker diff Name/ID    # 显示一个运行的容器里面的进程信息 docker top Name/ID    # 从容器里面拷贝文件/目录到本地一个路径 docker cp Name:/container_path to_path docker cp ID:/container_path to_path    # 重启一个正在运行的容器; -t, --time=10 Number of seconds to try to stop for before killing the container, Default=10 docker restart Name/ID    # 附加到一个运行的容器上面; --no-stdin=false Do not attach stdin; --sig-proxy=true Proxify all received signal to the process docker attach ID\nNote： attach命令允许你查看或者影响一个运行的容器。你可以在同一时间attach同一个容器。你也可以从一个容器中脱离出来，是从CTRL-C。\n保存和加载镜像（save、load）\n当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。\n1234567891011# 保存镜像到一个tar包; -o, --output=&quot;&quot; Write to an file docker save image_name -o file_path # 加载一个tar包格式的镜像; -i, --input=&quot;&quot; Read from a tar archive file docker load -i file_path    # 机器a docker save image_name &gt; /home/save.tar# 使用scp将save.tar拷到机器b上，然后:docker load &lt; /home/save.tar\n8、 登录registry server（login）\n1# 登陆registry server; -e, --email=&quot;&quot; Email; -p, --password=&quot;&quot; Password; -u, --username=&quot;&quot; Usernamedocker login\n发布image（push）\n12# 发布docker镜像 docker push new_image_name\n根据Dockerfile 构建出一个容器\n1234567#build    --no-cache=false Do not use cache when building the image    -q, --quiet=false Suppress the verbose output generated by the containers    --rm=true Remove intermediate containers after a successful build    -t, --tag=&quot;&quot; Repository name (and optionally a tag) to be applied to the resulting image in case of success docker build -t image_name Dockerfile_path\n其它参考：\nhttps://docs.docker.com/engine/reference/run/\nhttps://mrbird.cc/Docker-Image-Container.html\nhttp://blog.csdn.net/wsscy2004/article/details/25878363\nhttp://blog.csdn.net/iloveyin/article/details/40542431\n","plink":"http://www.crudboy.cn/2021/06/25/05.Docker命令整理/"},{"title":"about","date":"2020-05-23T20:07:42.000Z","date_formatted":{"ll":"May 23, 2020","L":"05/23/2020","MM-DD":"05-23"},"updated":"2020-05-23T12:07:42.000Z","content":"","plink":"http://www.crudboy.cn/about/"}]