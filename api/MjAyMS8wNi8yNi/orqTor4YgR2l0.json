{"title":"Git","date":"2021-06-26T01:05:06.796Z","date_formatted":{"ll":"Jun 26, 2021","L":"06/26/2021","MM-DD":"06-26"},"link":"2021/06/26/认识 Git","comments":true,"tags":["Git"],"categories":["Git"],"updated":"2021-06-25T17:05:06.796Z","content":"<span id=\"more\"></span>\n<h2 id=\"认识-git\">认识 Git<a title=\"#认识-git\" href=\"#认识-git\"></a></h2>\n<h3 id=\"git-简史\">Git 简史<a title=\"#git-简史\" href=\"#git-简史\"></a></h3>\n<p>Linux 内核项目组当时使用分布式版本控制系统 BitKeeper 来管理和维护代码。但是，后来开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了 Linux 内核社区免费使用 BitKeeper 的权力。 Linux 开源社区（特别是 Linux 的缔造者 Linus Torvalds）基于使用 BitKeeper 时的经验教训，开发出自己的版本系统，而且对新的版本控制系统做了很多改进。</p>\n<h3 id=\"git-与其他版本管理系统的主要区别\">Git 与其他版本管理系统的主要区别<a title=\"#git-与其他版本管理系统的主要区别\" href=\"#git-与其他版本管理系统的主要区别\"></a></h3>\n<p>Git 在保存和对待各种信息的时候与其它版本控制系统有很大差异，尽管操作起来的命令形式非常相近，理解这些差异将有助于防止你使用中的困惑。</p>\n<p>下面我们主要说一个关于 Git 其他版本管理系统的主要差别：<strong>对待数据的方式</strong>。</p>\n<p><strong>Git采用的是直接记录快照的方式，而非差异比较。我后面会详细介绍这两种方式的差别。</strong></p>\n<p>大部分版本控制系统（CVS、Subversion、Perforce、Bazaar 等等）都是以文件变更列表的方式存储信息，这类系统<strong>将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。</strong></p>\n<p>具体原理如下图所示，理解起来其实很简单，每个我们对提交更新一个文件之后，系统记录都会记录这个文件做了哪些更新，以增量符号Δ(Delta)表示。</p>\n<p><img src=\"https://stone-note.oss-cn-chengdu.aliyuncs.com/img/2019-3deltas-20201014181414760.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>我们怎样才能得到一个文件的最终版本呢？</strong></p>\n<p>很简单，高中数学的基本知识，我们只需要将这些原文件和这些增加进行相加就行了。</p>\n<p><strong>这种方式有什么问题呢？</strong></p>\n<p>比如我们的增量特别特别多的话，如果我们要得到最终的文件是不是会耗费时间和性能。</p>\n<p>Git 不按照以上方式对待或保存数据。 反之，Git 更像是把数据看作是对小型文件系统的一组快照。 每次你提交更新，或在 Git 中保存项目状态时，它主要对当时的全部文件制作一个快照并保存这个快照的索引。 为了高效，如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。 Git 对待数据更像是一个 <strong>快照流</strong>。</p>\n<p><img src=\"https://stone-note.oss-cn-chengdu.aliyuncs.com/img/2019-3snapshots-20201014181434190.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<h3 id=\"git-的三种状态\">Git 的三种状态<a title=\"#git-的三种状态\" href=\"#git-的三种状态\"></a></h3>\n<p>Git 有三种状态，你的文件可能处于其中之一：</p>\n<ol>\n<li><strong>已提交（committed）</strong>：数据已经安全的保存在本地数据库中。</li>\n<li><strong>已修改（modified）</strong>：已修改表示修改了文件，但还没保存到数据库中。</li>\n<li><strong>已暂存（staged）</strong>：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li>\n</ol>\n<p>由此引入 Git 项目的三个工作区域的概念：**Git 仓库(.git directoty)**、<strong>工作目录(Working Directory)</strong> 以及 <strong>暂存区域(Staging Area)</strong> 。</p>\n<p><img src=\"https://stone-note.oss-cn-chengdu.aliyuncs.com/img/2019-3areas-20201014181444515.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p><strong>基本的 Git 工作流程如下：</strong></p>\n<ol>\n<li>在工作目录中修改文件。</li>\n<li>暂存文件，将文件的快照放入暂存区域。</li>\n<li>提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</li>\n</ol>\n<h2 id=\"git-使用快速入门\">Git 使用快速入门<a title=\"#git-使用快速入门\" href=\"#git-使用快速入门\"></a></h2>\n<h3 id=\"获取-git-仓库\">获取 Git 仓库<a title=\"#获取-git-仓库\" href=\"#获取-git-仓库\"></a></h3>\n<p>有两种取得 Git 项目仓库的方法。</p>\n<ol>\n<li>在现有目录中初始化仓库: 进入项目目录运行 <code>git init</code> 命令,该命令将创建一个名为 <code>.git</code> 的子目录。</li>\n<li>从一个服务器克隆一个现有的 Git 仓库: <code>git clone [url]</code> 自定义本地仓库的名字: <code>git clone [url]</code> directoryname</li>\n</ol>\n<h3 id=\"记录每次更新到仓库\">记录每次更新到仓库<a title=\"#记录每次更新到仓库\" href=\"#记录每次更新到仓库\"></a></h3>\n<ol>\n<li><strong>检测当前文件状态</strong> : <code>git status</code></li>\n<li><strong>提出更改（把它们添加到暂存区</strong>）：<code>git add filename </code> (针对特定文件)、<code>git add *</code>(所有文件)、<code>git add *.txt</code>（支持通配符，所有 .txt 文件）</li>\n<li><strong>忽略文件</strong>：<code>.gitignore</code> 文件</li>\n<li><strong>提交更新:</strong> <code>git commit -m &quot;代码提交信息&quot;</code> （每次准备提交前，先用 <code>git status</code> 看下，是不是都已暂存起来了， 然后再运行提交命令 <code>git commit</code>）</li>\n<li><strong>跳过使用暂存区域更新的方式</strong> : <code>git commit -a -m &quot;代码提交信息&quot;</code>。 <code>git commit</code> 加上 <code>-a</code> 选项，Git 就会自动把所有已经跟踪过的文件暂存起来一并提交，从而跳过 <code>git add</code> 步骤。</li>\n<li><strong>移除文件</strong> ：<code>git rm filename</code> （从暂存区域移除，然后提交。）</li>\n<li><strong>对文件重命名</strong> ：<code>git mv README.md README</code>(这个命令相当于<code>mv README.md README</code>、<code>git rm README.md</code>、<code>git add README</code> 这三条命令的集合)</li>\n</ol>\n<h3 id=\"一个好的-git-提交消息\">一个好的 Git 提交消息<a title=\"#一个好的-git-提交消息\" href=\"#一个好的-git-提交消息\"></a></h3>\n<p>一个好的 Git 提交消息如下：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标题行：用这一行来描述和解释你的这次提交</span><br><span class=\"line\"></span><br><span class=\"line\">主体部分可以是很少的几行，来加入更多的细节来解释提交，最好是能给出一些相关的背景或者解释这个提交能修复和解决什么问题。</span><br><span class=\"line\"></span><br><span class=\"line\">主体部分当然也可以有几段，但是一定要注意换行和句子不要太长。因为这样在使用 &quot;git log&quot; 的时候会有缩进比较好看。Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>提交的标题行描述应该尽量的清晰和尽量的一句话概括。这样就方便相关的 Git 日志查看工具显示和其他人的阅读。</p>\n<h3 id=\"推送改动到远程仓库\">推送改动到远程仓库<a title=\"#推送改动到远程仓库\" href=\"#推送改动到远程仓库\"></a></h3>\n<ul>\n<li>\n<p>如果你还没有克隆现有仓库，并欲将你的仓库连接到某个远程服务器，你可以使用如下命令添加：·<code>git remote add origin &lt;server&gt;</code> ,比如我们要让本地的一个仓库和 Github 上创建的一个仓库关联可以这样<code>git remote add origin https://github.com/Snailclimb/test.git</code></p>\n</li>\n<li>\n<p>将这些改动提交到远端仓库：<code>git push origin master</code> (可以把 <em>master</em> 换成你想要推送的任何分支)</p>\n<p>如此你就能够将你的改动推送到所添加的服务器上去了。</p>\n</li>\n</ul>\n<h3 id=\"远程仓库的移除与重命名\">远程仓库的移除与重命名<a title=\"#远程仓库的移除与重命名\" href=\"#远程仓库的移除与重命名\"></a></h3>\n<ul>\n<li>将 test 重命名位 test1：<code>git remote rename test test1</code></li>\n<li>移除远程仓库 test1:<code>git remote rm test1</code></li>\n</ul>\n<h3 id=\"查看提交历史\">查看提交历史<a title=\"#查看提交历史\" href=\"#查看提交历史\"></a></h3>\n<p>在提交了若干更新，又或者克隆了某个项目之后，你也许想回顾下提交历史。 完成这个任务最简单而又有效的工具是 <code>git log</code> 命令。<code>git log</code> 会按提交时间列出所有的更新，最近的更新排在最上面。</p>\n<p><strong>可以添加一些参数来查看自己希望看到的内容：</strong></p>\n<p>只看某个人的提交记录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git log --author=bobCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<h3 id=\"撤销操作\">撤销操作<a title=\"#撤销操作\" href=\"#撤销操作\"></a></h3>\n<p>有时候我们提交完了才发现漏掉了几个文件没有添加，或者提交信息写错了。 此时，可以运行带有 <code>--amend</code> 选项的提交命令尝试重新提交：</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit --amendCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>取消暂存的文件</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset filenameCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>撤消对文件的修改:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -- filenameCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>假如你想丢弃你在本地的所有改动与提交，可以到服务器上获取最新的版本历史，并将你本地主分支指向它：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git fetch origin</span><br><span class=\"line\">git reset --hard origin/masterCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<h3 id=\"分支\">分支<a title=\"#分支\" href=\"#分支\"></a></h3>\n<p>分支是用来将特性开发绝缘开来的。在你创建仓库的时候，<em>master</em> 是“默认的”分支。在其他分支上进行开发，完成后再将它们合并到主分支上。</p>\n<p>我们通常在开发新功能、修复一个紧急 bug 等等时候会选择创建分支。单分支开发好还是多分支开发好，还是要看具体场景来说。</p>\n<p>创建一个名字叫做 test 的分支</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch testCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>切换当前分支到 test（当你切换分支的时候，Git 会重置你的工作目录，使其看起来像回到了你在那个分支上最后一次提交的样子。 Git 会自动添加、删除、修改文件以确保此时你的工作目录和这个分支最后一次提交时的样子一模一样）</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout testCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://stone-note.oss-cn-chengdu.aliyuncs.com/img/2019-3%E5%88%87%E6%8D%A2%E5%88%86%E6%94%AF-20201014181227261.png\" alt=\"img\" loading=\"lazy\" class=\"φbp\"></p>\n<p>你也可以直接这样创建分支并切换过去(上面两条命令的合写)</p>\n<figure class=\"highlight console\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout -b feature_xCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>切换到主分支</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout masterCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>合并分支(可能会有冲突)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git merge testCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>把新建的分支删掉</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -d feature_xCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n<p>将分支推送到远端仓库（推送成功后其他人可见）：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure>\n","prev":{"title":"你是怎样变得不\"浮躁\"的?","link":"2021/06/26/你是怎样变得不_浮躁_的"},"next":{"title":"Docker 命令","link":"2021/06/26/05.Docker命令整理"},"plink":"http://www.crudboy.cn/2021/06/26/认识 Git/","toc":[{"id":"认识-git","title":"认识 Git","index":"1","children":[{"id":"git-简史","title":"Git 简史","index":"1.1"},{"id":"git-与其他版本管理系统的主要区别","title":"Git 与其他版本管理系统的主要区别","index":"1.2"},{"id":"git-的三种状态","title":"Git 的三种状态","index":"1.3"}]},{"id":"git-使用快速入门","title":"Git 使用快速入门","index":"2","children":[{"id":"获取-git-仓库","title":"获取 Git 仓库","index":"2.1"},{"id":"记录每次更新到仓库","title":"记录每次更新到仓库","index":"2.2"},{"id":"一个好的-git-提交消息","title":"一个好的 Git 提交消息","index":"2.3"},{"id":"推送改动到远程仓库","title":"推送改动到远程仓库","index":"2.4"},{"id":"远程仓库的移除与重命名","title":"远程仓库的移除与重命名","index":"2.5"},{"id":"查看提交历史","title":"查看提交历史","index":"2.6"},{"id":"撤销操作","title":"撤销操作","index":"2.7"},{"id":"分支","title":"分支","index":"2.8"}]}],"reading_time":"2234 words in 11 min"}